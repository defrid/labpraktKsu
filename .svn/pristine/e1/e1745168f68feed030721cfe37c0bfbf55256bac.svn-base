$.extend(true, window, {
    "Slick": {
        "Editors": {
            "Base": BaseEditor
        }
    }
});

/**
 * API:
 *
 * args.column.validation: {
 *  type: "",
 *  function: "",
 *  pattern: ""
 * }
 *
 * @param args
 * @constructor
 */
function BaseEditor(args) {
    var $input;
    var defaultValue;
    var scope = this;
    validator = null;

    this.init = function () {
        this.prepareValidation();

        $input = $("<INPUT type=text class='editor-text' />")
            .appendTo(args.container)
            .bind("keydown.nav", function (e) {
                if (e.keyCode === $.ui.keyCode.LEFT || e.keyCode === $.ui.keyCode.RIGHT) {
                    e.stopImmediatePropagation();
                }
            })
            .focus()
            .select();
    };

    this.prepareValidation = function(){
        var validation = args.column.validation;
        if (!validation){
            return;
        }
        switch (validation.type){
            case 'function':
                validator = new Slick.Validators.Function(validation);
                break;
            case 'integer':
                validator = new Slick.Validators.Integer(validation);
                break;
            case 'pattern':
                validator = new Slick.Validators.Pattern(validation);
                break;
        }
    };

    this.destroy = function () {
        $input.remove();
    };

    this.focus = function () {
        $input.focus();
    };

    this.getValue = function () {
        return $input.val();
    };

    this.setValue = function (val) {
        $input.val(val);
    };

    this.loadValue = function (item) {
        defaultValue = item[args.column.field] || "";
        $input.val(defaultValue);
        $input[0].defaultValue = defaultValue;
        $input.select();
    };

    this.serializeValue = function () {
        return $input.val();
    };

    this.applyValue = function (item, state) {
        item[args.column.field] = state;
    };

    this.isValueChanged = function () {
        return (!($input.val() == "" && defaultValue == null)) && ($input.val() != defaultValue);
    };

    this.validate = function () {
        if (validator){
            var result = validator.validate($input.val(), args.item);
            if (!result.valid){
                $input.attr('title', result.msg);
                $input.tooltip({
                    position: {
                        my: "left top",
                        at: "right+5 top-5"
                    }
                });
                $input.tooltip('open');
            }
            return result;
        }
        return {
            valid: true,
            msg: null
        };
    };
    this.init();
}