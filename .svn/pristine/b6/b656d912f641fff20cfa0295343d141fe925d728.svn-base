
(function() {

    function getLastPathElement(path) {
        return path.substr(path.lastIndexOf('/'));
    };
    var app = angular.module('edm'); //

    app.controller('auditCtrl', function($scope, $http, $filter, $location, ngTableParams) {

    $scope.getFunc = function () {

        $scope.localref = getLastPathElement($location.path());


        $http.get($scope.localref + '/get', {params:{startDate:$scope.startDate, endDate:$scope.endDate}})
          .success(function(data) {
            $scope.files = data;
            //console.log('logs get: '+$scope.files.length);

            $('#loadingWidget').hide();

            // Update table
            if($scope.tableParams !== undefined) {

              $scope.tableParams.total( $scope.files.length);
              $scope.tableParams.page(1);
              $scope.tableParams.filter.Message = '';
              $scope.tableParams.reload();

            }else
            {
              $scope.tableParams = new ngTableParams({
                page: 1,            // show first page
                count: 50,          // count per page
                filter: {
                  Message: ''       // initial filter
                }
              }, {
                total:  $scope.files.length, //$scope.files.length, // length of data
                getData: function($defer, params) {

                  var orderedData = params.sorting() ?
                      $filter('orderBy')($scope.files, params.orderBy()) :
                      $scope.files;
                  orderedData = params.filter() ?
                      $filter('filter')(orderedData, params.filter()) :
                      orderedData;

                  $scope.audits = orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count());

                  params.total(orderedData.length); // set total for recalc pagination
                  $defer.resolve($scope.audits);

                }
              });

            }


          })
          .error(function(data, status, headers, config, statusText) {
            $scope.downloadStatus = 'Failed: ' + status + ' (' + statusText + ')';
            console.log('logs error: '+statusText);
            $('#loadingWidget').hide();
            //$scope.files = {Message:'No logs has been received. Connection error:'+statusText.toString()};
          });
    };

    $scope.today = function() {
      if($scope.startDate === undefined)
      {
        var newdate = new Date();
        newdate.setDate(newdate.getDate() - 7)
        $scope.startDate = newdate;
       }
      if($scope.endDate === undefined)
        $scope.endDate = new Date();
    };

    $scope.clear = function () {
      $scope.startDate = null;
      $scope.endDate = null;
    };

    $scope.openStart = function($event) {
      $event.preventDefault();
      $event.stopPropagation();

      $scope.openedStart = true;
    };
    $scope.openEnd = function($event) {
      $event.preventDefault();
      $event.stopPropagation();

      $scope.openedEnd = true;
    };

    $scope.dateOptions = {
      formatYear: 'yy',
      startingDay: 1
    };

    $scope.loglevels = ['','DEBUG' , 'INFO', 'ERROR','CRITICAL','WARN','FATAL'];
    $scope.loglevel = $scope.loglevels[0];



    // Main refresh func
    $scope.Refresh = function()
    {
      $('#loadingWidget').show();
    
      $scope.getFunc();

      $scope.today();
    }


    $scope.Refresh();


    console.log('in auditCtrl');
  });

})();